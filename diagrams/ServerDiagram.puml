@startuml

package Server {

    class ResponseBuilder {
    --Methods--
    ~ static createNewResponse(ResponseType responseType) : Response
    ~ static createNewResponse(ResponseType responseType, String line) : Response
    }

    class ResponseImpl {
    --Methods--
    * (implemented from Response)
    }

    class ServerCollectionManager {
    --Methods--
    ~ static initialize() : void
    - static loadDBPrivates() : void
    - static initializeStatements() ; void
    ~ static createTables() : void
    ~ static close() : void
    ~ static dropTables() : void
    + static getUserID(String userName) : long
    + static getUserID(UserProfile user) : long
    + static isUserPresented(UserProfile userProfile) : boolean
    + static getUserName(long id) : String
    + static registerUser(UserProfile userProfile) : long
    + static removeUser(UserProfile userProfile) : UserProfile
    ~ static removeUser(String userName)
    + static getMovie(Integer key) : Movie
    + static putMovie(Integer key, Movie movie, UserProfile userProfile) : Movie
    - static checkPermission(Integer key, UserProfile userProfile) : void
    + static updateMovie(Integer key, Movie movie, UserProfile userProfile)
    + static removeMovie(Integer key, UserProfile userProfile) : Movie
    ~ static removeMovie(Integer key) : void
    + static removeAllMovies(UserProfile userProfile) : void
    ~ static removeAllMovies() : void
    ~ static loadCollectionsFromDB() : void
    - static parseUser(ResultSet resultSet) : Map.Entry<String,UserProfile>
    - static parseMovie(ResultSet resultSet) : Map.Entry<Integer,Movie>
    + static getMovieCollection() : Hashtable<Integer,Movie>
    ~ static printTables() : void
    }

    class ServerConnector {
    --Methods--
    ~ static initialize(int port) : void
    - static bindChannel(int port) : void
    ~ static close() : void
    + static run() : void
    - static receiveRequest() : void
    ~ static sendToClient(SocketAddress client, Response response) : void
    }

    class ServerController {
    --Methods--
    + static info(String message) : void
    + static error(String message) : void
    + static run() : void
    }

    class ServerExecutor {
    --Methods--
    ~ static initialize(int port) : void
    ~ executeRequest() : void
    - checkConnectionRequest() : void
    - loginUserRequest() : void
    - logoutUserRequest() : void
    ~ static logoutUser(String userName) : void
    - checkElementRequest() : void
    - registerUserRequest() : void
    - executeCommandRequest() : void
    - validateCommands(Queue<Command> commandQueue) : void
    ~ static printUsers() : void
    + static getService() : ExecutorService
    ~ static getAuthorizedUsers() : List<UserProfile>
    }

    class ServerHistoryManager {
    --Methods--
    ~ static initialize(int port) : void
    ~ static updateUser(UserProfile userProfile) : void
    ~ static deleteUser(UserProfile userProfile) : void
    ~ static addUserHistory(UserProfile userProfile, String command) : void
    ~ static clearUserHistory(String username) : void
    + static getUserHistory(UserProfile userProfile) : LinkedList<String>
    - static saveUserHistories() : void
    ~ static close() : void
    - static loadUserHistories() : void
    - static watchAndDeleteAFKUsers() : void
    }

    class ServerINFOImpl {
    --Methods--
    * (implemented from ServerINFO)
    }

    class ServerINFOClone {
    --Fields--
    - final Hashtable<Integer, Movie> movieCollection
    }

    ServerINFOClone -up-+ ServerINFOImpl

    class ServerManager {
    --Methods--
    + static run(int port) : void
    - static initializations(int port) : void
    }

}

@enduml